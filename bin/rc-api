#!/usr/bin/env python3.4

import argparse
import getpass
import logging

from rc import APIClient

if __name__ == "__main__":
  parser = argparse.ArgumentParser()
  parser.add_argument('-public_key', help="Project Public Key(defaults to OS environment variable `RC_PROJECT_PUBLIC_KEY`")
  parser.add_argument('-private_key', help="Project Private Key(defaults to OS environment variable `RC_PROJECT_PRIVATE_KEY`")
  parser.add_argument('-host', help="API Host(default: 'http://roboticsclub.org/crm')")
  parser.add_argument('-v', '--verbose', help="Print logging info to stdout", action='store_true')

  actions_parser = parser.add_subparsers(dest='action', help="API Action")
  actions_parser.required = True

  def print_object(o):
    if type(o).__name__ == 'list':
      for i, k in enumerate(o):
        if i != 0:
          print()

        print_object(k)
    elif isinstance(o, dict):
      for key, value in o.items():
        print("{} {}".format(key, value))
    else:
      print(o)

  def query_type(o):
    key, value = o.split('=')
    return (key,value)

  def create_model_parser(action, help_message):
    """
    Parser that accepts arguments that make sense for a model endpoint.
    """

    model_parser = actions_parser.add_parser(action, help=help_message)
    model_parser.add_argument('params', nargs='*', type=query_type, help="{} query parameters".format(action))
    return model_parser

  create_model_parser('users', "Roboclub Users")
  create_model_parser('projects', "Roboclub Projects")
  create_model_parser('officers', "Roboclub Officers")
  create_model_parser('webcams', "Roboclub Webcams")
  create_model_parser('social_medias', "Roboclub Social Medias")
  
  channels_parser = actions_parser.add_parser('channels', help="Roboclub Channels for projects to communicate with one another")
  channels_method_parser = channels_parser.add_subparsers(dest='method', help="Channel Method")
  channels_method_parser.required = True
  
  channels_list_parser = channels_method_parser.add_parser('list', help="Lists Channels that meet search criteria")
  channels_list_parser.add_argument('params', nargs='*', type=query_type, help="Channel list query parameters")

  channels_create_parser = channels_method_parser.add_parser('create', help="Creates a Channel")
  channels_create_parser.add_argument('name', help="Name of the channel")

  channels_write_parser = channels_method_parser.add_parser('write', help="Writes to a Channel")
  channels_write_parser.add_argument('id', help="ID of the channel")
  channels_write_parser.add_argument('value', help="Value to write to channel")

  calendar_parser = actions_parser.add_parser('calendar', help="What is currently occuring in the club")

  login_parser = actions_parser.add_parser('login', help="Determine if credentials valid for a provided username and password")
  login_parser.add_argument('username', help="Member's Username")

  datetime_parser = actions_parser.add_parser('datetime', help="Current Datetime")

  rfid_parser = actions_parser.add_parser('rfid', help="RFID based User lookup")
  rfid_parser.add_argument('id')

  magnetic_parser = actions_parser.add_parser('magnetic', help="Magnetic Stripe based User lookup")
  magnetic_parser.add_argument('id')

  args = parser.parse_args()

  public_key = args.public_key
  private_key = args.private_key
  host = args.host
  verbose = args.verbose
  action = args.action

  logger = logging.getLogger()

  if verbose:
    logger.setLevel(logging.DEBUG)

    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setLevel(logging.DEBUG)
    console_formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    console_handler.setFormatter(console_formatter)
    logger.addHandler(console_handler)

  client = APIClient(public_key, private_key, host)
  
  logger.debug("API client created")

  data = None

  if action == 'calendar':
    data = client.calendar()
  elif action == 'login':
    username = args.username
    password = getpass.getpass()
    
    data = client.login(username, password)
  elif action == 'datetime':
    data = client.datetime()
  elif action == 'rfid':
    _id = args.id
    data = client.rfid(_id)
  elif action == 'magnetic':
    _id = args.id
    data = client.magnetic(_id)
  elif action == 'channels':
    method = args.method

    if method == 'list':
      params = args.params
      query_params = {}

      for (key, value) in params:
        query_params[key] = value

      data = client.channels(**query_params)
    elif method == 'create':
      name = args.name
      data = client.channel_create(name)
    elif method == 'write':
      id = args.id
      value = args.value
      data = client.channel_write(id, value)

  else:
    logger.info("action {} might have parameters".format(action))

    params = args.params
    query_params = {}

    for (key, value) in params:
      query_params[key] = value

    if action == 'users':
      data = client.users(**query_params)
    elif action == 'projects':
      data = client.projects(**query_params)
    elif action == 'officers':
      data = client.officers(**query_params)
    elif action == 'webcams':
      data = client.webcams(**query_params)
    elif action == 'social_medias':
      data = client.social_medias(**query_params)

  logger.debug("resulting data is {}".format(data))

  print_object(data)
